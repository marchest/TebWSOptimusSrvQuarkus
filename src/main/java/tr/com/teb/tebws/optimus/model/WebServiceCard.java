package tr.com.teb.tebws.optimus.model;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.11
 * 2020-03-30T10:32:02.945+03:00
 * Generated source version: 2.7.11
 * 
 */
@WebServiceClient(name = "WebServiceCard", 
                  wsdlLocation = "classpath:wsdl/Optimus.wsdl",
                  targetNamespace = "TEB.WebServiceCard") 
public class WebServiceCard extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("TEB.WebServiceCard", "WebServiceCard");
    public final static QName WebServiceCardSoap = new QName("TEB.WebServiceCard", "WebServiceCardSoap");
    public final static QName WebServiceCardSoap12 = new QName("TEB.WebServiceCard", "WebServiceCardSoap12");
    public final static QName WebServiceCardHttpPost = new QName("TEB.WebServiceCard", "WebServiceCardHttpPost");
    public final static QName WebServiceCardHttpGet = new QName("TEB.WebServiceCard", "WebServiceCardHttpGet");
    static {
        URL url = WebServiceCard.class.getClassLoader().getResource("wsdl/Optimus.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(WebServiceCard.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "classpath:wsdl/Optimus.wsdl");
        }       
        WSDL_LOCATION = url;   
    }

    public WebServiceCard(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WebServiceCard(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WebServiceCard() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WebServiceCard(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WebServiceCard(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WebServiceCard(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns WebServiceCardSoap
     */
    @WebEndpoint(name = "WebServiceCardSoap")
    public WebServiceCardSoap getWebServiceCardSoap() {
        return super.getPort(WebServiceCardSoap, WebServiceCardSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebServiceCardSoap
     */
    @WebEndpoint(name = "WebServiceCardSoap")
    public WebServiceCardSoap getWebServiceCardSoap(WebServiceFeature... features) {
        return super.getPort(WebServiceCardSoap, WebServiceCardSoap.class, features);
    }
    /**
     *
     * @return
     *     returns WebServiceCardSoap
     */
    @WebEndpoint(name = "WebServiceCardSoap12")
    public WebServiceCardSoap getWebServiceCardSoap12() {
        return super.getPort(WebServiceCardSoap12, WebServiceCardSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebServiceCardSoap
     */
    @WebEndpoint(name = "WebServiceCardSoap12")
    public WebServiceCardSoap getWebServiceCardSoap12(WebServiceFeature... features) {
        return super.getPort(WebServiceCardSoap12, WebServiceCardSoap.class, features);
    }
    /**
     *
     * @return
     *     returns WebServiceCardHttpPost
     */
    @WebEndpoint(name = "WebServiceCardHttpPost")
    public WebServiceCardHttpPost getWebServiceCardHttpPost() {
        return super.getPort(WebServiceCardHttpPost, WebServiceCardHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebServiceCardHttpPost
     */
    @WebEndpoint(name = "WebServiceCardHttpPost")
    public WebServiceCardHttpPost getWebServiceCardHttpPost(WebServiceFeature... features) {
        return super.getPort(WebServiceCardHttpPost, WebServiceCardHttpPost.class, features);
    }
    /**
     *
     * @return
     *     returns WebServiceCardHttpGet
     */
    @WebEndpoint(name = "WebServiceCardHttpGet")
    public WebServiceCardHttpGet getWebServiceCardHttpGet() {
        return super.getPort(WebServiceCardHttpGet, WebServiceCardHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebServiceCardHttpGet
     */
    @WebEndpoint(name = "WebServiceCardHttpGet")
    public WebServiceCardHttpGet getWebServiceCardHttpGet(WebServiceFeature... features) {
        return super.getPort(WebServiceCardHttpGet, WebServiceCardHttpGet.class, features);
    }

}
